<?php
/**
 *
 * Implement the Sewing Kit functionality
 * Uses VBO to create a new "Thread" node with entityreferences to selected nodes
 * Adds a new content type called "Thread"
 *
 * Mike Widner <mikewidner@stanford.edu>
 *
 */

define('NEW_THREAD', -1);
/***
 *
 * Implement a VBO action for user-facing Sewing Kit functionality
 *
 ***/
function sewing_kit_action_info() {
  return array(
    'sewing_kit_stitch' => array(
      'type' => 'node',
      'label' => t('Add to Thread'),
      'configurable' => TRUE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
      'aggregate' => TRUE,
      // @see https://www.drupal.org/node/2542120
      'behavior' => array('views_property'), // just check for viewing permissions
    ),
    'sewing_kit_remove' => array(
      'type' => 'node',
      'label' => t('Remove from Thread'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'behavior' => array('changes_property'),
      'aggregate' => TRUE,
    )
  );
}

// Create a new Thread; populate with references to all selected nodes
function sewing_kit_stitch(&$node, $context) {
  global $user;
  if (!isset($context['thread_new'])) {
    // Add to existing thread; we pass the node id in the select form
    $sewing_kit_thread = node_load($context['thread_add']);
  }
  else {
    $sewing_kit_thread = new stdClass();
    $sewing_kit_thread->title = $context['thread_new'];
    $sewing_kit_thread->type = 'thread';
    node_object_prepare($sewing_kit_thread);
    $sewing_kit_thread->language = LANGUAGE_NONE;
    $sewing_kit_thread->uid = $user->uid;
    $sewing_kit_thread->status = NODE_PUBLISHED; // (1 or 0): published or not
    $sewing_kit_thread->promote = NODE_NOT_PROMOTED; // (1 or 0): promoted to front page
    $sewing_kit_thread->comment = COMMENT_NODE_OPEN; // allow commenting
    $sewing_kit_thread->thread_description[LANGUAGE_NONE][0]['value'] = $context['thread_description']['value'];
    $sewing_kit_thread->thread_description[LANGUAGE_NONE][0]['format'] = 'filtered_html';
    $sewing_kit_thread->thread_reference[LANGUAGE_NONE] = array();
    $sewing_kit_thread->group_content_access[LANGUAGE_NONE][0]['value'] = OG_CONTENT_ACCESS_PRIVATE;
  }

  // Add references to annotation nodes
  $stitches = array();
  foreach ($sewing_kit_thread->thread_reference[LANGUAGE_NONE] as $stitch) {
    $stitches[] = $stitch['target_id'];
  }
  foreach (array_keys($node) as $nid) {
    if (!in_array($nid, $stitches)) {  // Don't duplicate existing annotations
      $sewing_kit_thread->thread_reference[LANGUAGE_NONE][] = array(
        'target_id' => $nid,
        'target_type' => 'node'
      );
    }
  }

  $sewing_kit_thread = node_submit($sewing_kit_thread);
  node_save($sewing_kit_thread);
  // Add to course group
  og_group('node', course_get_selected_course(), array(
    'entity_type' => 'node',
    'entity' => $sewing_kit_thread,
    'field_name' => 'og_group_ref',
  ));

  drupal_set_message('Your thread ' . l($sewing_kit_thread->title, drupal_get_path_alias('node/' . $sewing_kit_thread->nid)) . ' has been saved.');
}

// Require a title for the new thread
function sewing_kit_stitch_form($settings) {
  global $user;
  $form = array();
  $threads = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'thread')
    ->propertyCondition('status', 1)
    ->propertyCondition('uid', $user->uid);
  $result = $query->execute();

  if ($result) {
    $nids = array_keys($result['node']);
    foreach ($nids as $nid) {
      $threads[$nid] = node_load($nid)->title;
    }
  }

  $threads[NEW_THREAD] = '-- Create New Thread --';
  $form['thread_add'] = array(
    '#type' => 'select',
    '#title' => 'Add to thread',
    '#options' => $threads,
  );

  // $form['thread_new'] = array();
  $form['thread_new'] = array(
    '#type' => 'textfield',
    '#title' => t('Thread Title'),
    '#default_value' => 'My New Thread',
    '#size' => 60,
    '#maxlength' => 128,
    '#description' => "Enter a title for your new thread",
    '#states' => array(
      'visible' => array(
        ':input[name="thread_add"]' => array('value' => NEW_THREAD)
      )
    )
  );

  $form['thread_description'] = array(
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#format' => 'filtered_html',
    '#title' => t('Description'),
    '#default_value' => 'Enter a description here',
    '#rows' => 5,
    '#states' => array(
      'visible' => array(
        ':input[name="thread_add"]' => array('value' => NEW_THREAD)
      )
    )
  );

  return $form;
}


function sewing_kit_stitch_submit($form, $form_state) {
  $return = array();
  $return['thread_new'] = $form_state['values']['thread_new'];
  $return['thread_description']['value'] = $form_state['values']['thread_description']['value'];
  if ($form_state['values']['thread_add'] == NEW_THREAD) {
    unset($return['thread_add']);
  }
  else {
    $return['thread_add'] = $form_state['values']['thread_add'];
    unset($return['thread_new']);
    unset($return['thread_description']);
  }
  return $return;
}

/**
 * @param $node
 * @param $context
 *
 * Callback for removing stitchings from a thread
 */
function sewing_kit_remove(&$node, $context) {
  $anno_ids = array_keys($node);
  // nid provided as a contextual filter to the view block
  $node_wrapper = entity_metadata_wrapper('node', $context['view_info']['arguments'][0]);
  foreach ($node_wrapper->thread_reference as $delta => $annotation) {
    if (in_array($annotation->nid->value(), $anno_ids)) {
      // Found one; kill it!
      $node_wrapper->thread_reference[$delta] = NULL;
    }
  }
  $node_wrapper->save();
}

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 * Implements hook_form_FORM_ID_alter().
 * Hide some fields from users that they don't need.
 */
function sewing_kit_form_thread_node_form_alter(&$form, &$form_state, $form_id) {
  $form['og_group_ref']['#access'] = FALSE;
  $form['thread_reference']['#access'] = FALSE;
  $form['group_content_access']['#access'] = FALSE; // hide confusing option; always private
}
