<?php
/**
 * @file
 * This module handles hooks and alterations necessary
 * for the course functionality around user registration, approval, and
 * permissions
 */


/**
 * Implements hook_menu_alter().
 *
 * Restrict access to course-related content generated by other modules
 * For all of these items, only approved members of the current course
 * should have access. Some of these have role-based permissions,
 * but the addition of approved/unapproved students makes this necessary.
 *
 * @param $items
 *    Array of menu items
 */
function course_menu_alter(&$items) {
  // Access to views handled in course_views_query_alter()
  $items_to_restrict = array(
    'visualization/responses',
    'visualization/dashboard',
    'visualization/dashboard/data.json',
    'visualization/journey',  // Not implemented, but still...
  );

  foreach ($items_to_restrict as $item) {
    $items[$item]['access callback'] = 'course_registration_content_access';
  }
}

/**
 * Deny access if a user is a member of a course group,
 * but not yet approved
 */
function course_registration_content_access() {
  $access = FALSE;
  $gid = course_get_selected_course();

  if (user_access('administer nodes')) {
    $access = TRUE;
  } elseif (!empty($gid) && og_is_member('node', $gid) == TRUE) { // Only returns true if member is active
    $access = TRUE;
  }

  return $access;
}

/**
 * Implements hook_action_info().
 *
 * Create new VBO for activating/blocking course members
 */
function course_registration_action_info() {
  $defaults = array(
    'type' => 'user',
    'configurable' => FALSE,
    'vbo_configurable' => FALSE,
    'aggregate' => TRUE,
    'behavior' => array('views_property'),
    // If user can create courses, then can be course admin
    // OG implements its own permissions that we can't access from VBO
    // We could use actions_permissions module to configure this
    // But then need to set up permissions for all the other VBOs we use
    'permissions' => array('create course content'),
  );

  $actions = array(
    'course_registration_approve' => array(
      'label' => t('Approve'),
    ),
    'course_registration_block' => array(
      'label' => t('Block'),
    ),
  );

  // Add in the common default settings
  foreach (array_keys($actions) as $action) {
    foreach ($defaults as $key => $val) {
      $actions[$action][$key] = $val;
    }
  }
  return $actions;
}

/**
 * @param $users
 * @param $context
 *
 * Approve a student's enrollment in the instructor's current course.
 */
function course_registration_approve(&$users, $context) {
  $gid = course_get_selected_course();
  foreach ($users as $user) {
    $membership = og_get_membership('node', $gid, 'user', $user->uid);
    $membership->state = OG_STATE_ACTIVE;
    og_membership_save($membership);
  }
}

/**
 * @param $users
 * @param $context
 *
 * Block a student from the instructor's current course.
 */
function course_registration_block(&$users, $context) {
  $gid = course_get_selected_course();
  foreach ($users as $user) {
    $membership = og_get_membership('node', $gid, 'user', $user->uid);
    $membership->state = OG_STATE_BLOCKED;
    og_membership_save($membership);
  }
}

/**
 * @param $form
 * @param $form_state
 *
 * Implements hook_form_FORM_ID_alter(). Modify text in the OG join confirm form.
 */
function course_registration_form_og_ui_confirm_subscribe_alter(&$form, &$form_state) {
  $form['description']['#markup'] = t("<h4>Enrollment for this course is confined to registered students at this site's university or institution. It is not open and available to the general public. If you are a student enrolled in this course, please proceed by clicking 'Join.'</h4>");
}

/**
 * @param $view
 * @param $query
 *
 * Implements hook_views_query_alter().
 * Modify "Manage Students" view to show users in current course only.
 */
function course_registration_views_query_alter(&$view, &$query) {
//  if ($view->name == 'manage_enrollment') {
//    $gid = course_get_selected_course();
//    $query->add_where_expression(2, "users.uid IN (SELECT etid FROM og_membership WHERE gid = " . $gid . " AND og_membership.entity_type = 'user')");
//  }
}